// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: mumax.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NULL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NULL) Reset() {
	*x = NULL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NULL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NULL) ProtoMessage() {}

func (x *NULL) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NULL.ProtoReflect.Descriptor instead.
func (*NULL) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{0}
}

type STRING struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S string `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *STRING) Reset() {
	*x = STRING{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STRING) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STRING) ProtoMessage() {}

func (x *STRING) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STRING.ProtoReflect.Descriptor instead.
func (*STRING) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{1}
}

func (x *STRING) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

type STRINGs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S []string `protobuf:"bytes,1,rep,name=s,proto3" json:"s,omitempty"`
}

func (x *STRINGs) Reset() {
	*x = STRINGs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STRINGs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STRINGs) ProtoMessage() {}

func (x *STRINGs) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STRINGs.ProtoReflect.Descriptor instead.
func (*STRINGs) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{2}
}

func (x *STRINGs) GetS() []string {
	if x != nil {
		return x.S
	}
	return nil
}

type BOOL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S bool `protobuf:"varint,1,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *BOOL) Reset() {
	*x = BOOL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BOOL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BOOL) ProtoMessage() {}

func (x *BOOL) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BOOL.ProtoReflect.Descriptor instead.
func (*BOOL) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{3}
}

func (x *BOOL) GetS() bool {
	if x != nil {
		return x.S
	}
	return false
}

type BOOLs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S []bool `protobuf:"varint,1,rep,packed,name=s,proto3" json:"s,omitempty"`
}

func (x *BOOLs) Reset() {
	*x = BOOLs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BOOLs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BOOLs) ProtoMessage() {}

func (x *BOOLs) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BOOLs.ProtoReflect.Descriptor instead.
func (*BOOLs) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{4}
}

func (x *BOOLs) GetS() []bool {
	if x != nil {
		return x.S
	}
	return nil
}

type INT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S int64 `protobuf:"varint,1,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *INT) Reset() {
	*x = INT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *INT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*INT) ProtoMessage() {}

func (x *INT) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use INT.ProtoReflect.Descriptor instead.
func (*INT) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{5}
}

func (x *INT) GetS() int64 {
	if x != nil {
		return x.S
	}
	return 0
}

type INTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S []int64 `protobuf:"varint,1,rep,packed,name=s,proto3" json:"s,omitempty"`
}

func (x *INTs) Reset() {
	*x = INTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *INTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*INTs) ProtoMessage() {}

func (x *INTs) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use INTs.ProtoReflect.Descriptor instead.
func (*INTs) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{6}
}

func (x *INTs) GetS() []int64 {
	if x != nil {
		return x.S
	}
	return nil
}

type DOUBLE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S float64 `protobuf:"fixed64,1,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *DOUBLE) Reset() {
	*x = DOUBLE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DOUBLE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DOUBLE) ProtoMessage() {}

func (x *DOUBLE) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DOUBLE.ProtoReflect.Descriptor instead.
func (*DOUBLE) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{7}
}

func (x *DOUBLE) GetS() float64 {
	if x != nil {
		return x.S
	}
	return 0
}

type DOUBLEs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S []float64 `protobuf:"fixed64,1,rep,packed,name=s,proto3" json:"s,omitempty"`
}

func (x *DOUBLEs) Reset() {
	*x = DOUBLEs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DOUBLEs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DOUBLEs) ProtoMessage() {}

func (x *DOUBLEs) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DOUBLEs.ProtoReflect.Descriptor instead.
func (*DOUBLEs) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{8}
}

func (x *DOUBLEs) GetS() []float64 {
	if x != nil {
		return x.S
	}
	return nil
}

type Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Argtypes []string `protobuf:"bytes,1,rep,name=argtypes,proto3" json:"argtypes,omitempty"`
	Argnames []string `protobuf:"bytes,2,rep,name=argnames,proto3" json:"argnames,omitempty"`
	Outtypes []string `protobuf:"bytes,3,rep,name=outtypes,proto3" json:"outtypes,omitempty"`
}

func (x *Function) Reset() {
	*x = Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{9}
}

func (x *Function) GetArgtypes() []string {
	if x != nil {
		return x.Argtypes
	}
	return nil
}

func (x *Function) GetArgnames() []string {
	if x != nil {
		return x.Argnames
	}
	return nil
}

func (x *Function) GetOuttypes() []string {
	if x != nil {
		return x.Outtypes
	}
	return nil
}

type LValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Inputtype string `protobuf:"bytes,2,opt,name=inputtype,proto3" json:"inputtype,omitempty"`
}

func (x *LValue) Reset() {
	*x = LValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LValue) ProtoMessage() {}

func (x *LValue) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LValue.ProtoReflect.Descriptor instead.
func (*LValue) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{10}
}

func (x *LValue) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LValue) GetInputtype() string {
	if x != nil {
		return x.Inputtype
	}
	return ""
}

type ROnly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ROnly) Reset() {
	*x = ROnly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ROnly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROnly) ProtoMessage() {}

func (x *ROnly) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROnly.ProtoReflect.Descriptor instead.
func (*ROnly) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{11}
}

func (x *ROnly) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Doc  string `protobuf:"bytes,2,opt,name=doc,proto3" json:"doc,omitempty"`
	// Types that are assignable to Props:
	//
	//	*Identifier_L
	//	*Identifier_R
	//	*Identifier_F
	Props isIdentifier_Props `protobuf_oneof:"props"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{12}
}

func (x *Identifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Identifier) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (m *Identifier) GetProps() isIdentifier_Props {
	if m != nil {
		return m.Props
	}
	return nil
}

func (x *Identifier) GetL() *LValue {
	if x, ok := x.GetProps().(*Identifier_L); ok {
		return x.L
	}
	return nil
}

func (x *Identifier) GetR() *ROnly {
	if x, ok := x.GetProps().(*Identifier_R); ok {
		return x.R
	}
	return nil
}

func (x *Identifier) GetF() *Function {
	if x, ok := x.GetProps().(*Identifier_F); ok {
		return x.F
	}
	return nil
}

type isIdentifier_Props interface {
	isIdentifier_Props()
}

type Identifier_L struct {
	L *LValue `protobuf:"bytes,3,opt,name=l,proto3,oneof"`
}

type Identifier_R struct {
	R *ROnly `protobuf:"bytes,4,opt,name=r,proto3,oneof"`
}

type Identifier_F struct {
	F *Function `protobuf:"bytes,5,opt,name=f,proto3,oneof"`
}

func (*Identifier_L) isIdentifier_Props() {}

func (*Identifier_R) isIdentifier_Props() {}

func (*Identifier_F) isIdentifier_Props() {}

type MumaxObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identity:
	//
	//	*MumaxObject_Name
	//	*MumaxObject_Ptr
	Identity isMumaxObject_Identity `protobuf_oneof:"identity"`
}

func (x *MumaxObject) Reset() {
	*x = MumaxObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MumaxObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MumaxObject) ProtoMessage() {}

func (x *MumaxObject) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MumaxObject.ProtoReflect.Descriptor instead.
func (*MumaxObject) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{13}
}

func (m *MumaxObject) GetIdentity() isMumaxObject_Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (x *MumaxObject) GetName() string {
	if x, ok := x.GetIdentity().(*MumaxObject_Name); ok {
		return x.Name
	}
	return ""
}

func (x *MumaxObject) GetPtr() uint32 {
	if x, ok := x.GetIdentity().(*MumaxObject_Ptr); ok {
		return x.Ptr
	}
	return 0
}

type isMumaxObject_Identity interface {
	isMumaxObject_Identity()
}

type MumaxObject_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

type MumaxObject_Ptr struct {
	Ptr uint32 `protobuf:"varint,2,opt,name=ptr,proto3,oneof"`
}

func (*MumaxObject_Name) isMumaxObject_Identity() {}

func (*MumaxObject_Ptr) isMumaxObject_Identity() {}

type MumaxObjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S []*MumaxObject `protobuf:"bytes,1,rep,name=s,proto3" json:"s,omitempty"`
}

func (x *MumaxObjects) Reset() {
	*x = MumaxObjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MumaxObjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MumaxObjects) ProtoMessage() {}

func (x *MumaxObjects) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MumaxObjects.ProtoReflect.Descriptor instead.
func (*MumaxObjects) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{14}
}

func (x *MumaxObjects) GetS() []*MumaxObject {
	if x != nil {
		return x.S
	}
	return nil
}

type FunctionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ArgString         []string          `protobuf:"bytes,2,rep,name=argString,proto3" json:"argString,omitempty"`
	ArgBool           []bool            `protobuf:"varint,3,rep,packed,name=argBool,proto3" json:"argBool,omitempty"`
	ArgDouble         []float64         `protobuf:"fixed64,4,rep,packed,name=argDouble,proto3" json:"argDouble,omitempty"`
	ArgInt            []int64           `protobuf:"varint,5,rep,packed,name=argInt,proto3" json:"argInt,omitempty"`
	ArgMumax          []*MumaxObject    `protobuf:"bytes,6,rep,name=argMumax,proto3" json:"argMumax,omitempty"`
	ArgScalarFunction []*ScalarFunction `protobuf:"bytes,7,rep,name=argScalarFunction,proto3" json:"argScalarFunction,omitempty"`
	ArgVectorFunction []*VectorFunction `protobuf:"bytes,8,rep,name=argVectorFunction,proto3" json:"argVectorFunction,omitempty"`
	ArgQuantity       []*Quantity       `protobuf:"bytes,9,rep,name=argQuantity,proto3" json:"argQuantity,omitempty"`
}

func (x *FunctionCall) Reset() {
	*x = FunctionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCall) ProtoMessage() {}

func (x *FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCall.ProtoReflect.Descriptor instead.
func (*FunctionCall) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{15}
}

func (x *FunctionCall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionCall) GetArgString() []string {
	if x != nil {
		return x.ArgString
	}
	return nil
}

func (x *FunctionCall) GetArgBool() []bool {
	if x != nil {
		return x.ArgBool
	}
	return nil
}

func (x *FunctionCall) GetArgDouble() []float64 {
	if x != nil {
		return x.ArgDouble
	}
	return nil
}

func (x *FunctionCall) GetArgInt() []int64 {
	if x != nil {
		return x.ArgInt
	}
	return nil
}

func (x *FunctionCall) GetArgMumax() []*MumaxObject {
	if x != nil {
		return x.ArgMumax
	}
	return nil
}

func (x *FunctionCall) GetArgScalarFunction() []*ScalarFunction {
	if x != nil {
		return x.ArgScalarFunction
	}
	return nil
}

func (x *FunctionCall) GetArgVectorFunction() []*VectorFunction {
	if x != nil {
		return x.ArgVectorFunction
	}
	return nil
}

func (x *FunctionCall) GetArgQuantity() []*Quantity {
	if x != nil {
		return x.ArgQuantity
	}
	return nil
}

type Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Elements:
	//
	//	*Array_I
	//	*Array_B
	//	*Array_S
	//	*Array_D
	//	*Array_O
	//	*Array_A
	Elements isArray_Elements `protobuf_oneof:"elements"`
}

func (x *Array) Reset() {
	*x = Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Array) ProtoMessage() {}

func (x *Array) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Array.ProtoReflect.Descriptor instead.
func (*Array) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{16}
}

func (m *Array) GetElements() isArray_Elements {
	if m != nil {
		return m.Elements
	}
	return nil
}

func (x *Array) GetI() *INTs {
	if x, ok := x.GetElements().(*Array_I); ok {
		return x.I
	}
	return nil
}

func (x *Array) GetB() *BOOLs {
	if x, ok := x.GetElements().(*Array_B); ok {
		return x.B
	}
	return nil
}

func (x *Array) GetS() *STRINGs {
	if x, ok := x.GetElements().(*Array_S); ok {
		return x.S
	}
	return nil
}

func (x *Array) GetD() *DOUBLEs {
	if x, ok := x.GetElements().(*Array_D); ok {
		return x.D
	}
	return nil
}

func (x *Array) GetO() *MumaxObjects {
	if x, ok := x.GetElements().(*Array_O); ok {
		return x.O
	}
	return nil
}

func (x *Array) GetA() *Arrays {
	if x, ok := x.GetElements().(*Array_A); ok {
		return x.A
	}
	return nil
}

type isArray_Elements interface {
	isArray_Elements()
}

type Array_I struct {
	I *INTs `protobuf:"bytes,1,opt,name=i,proto3,oneof"`
}

type Array_B struct {
	B *BOOLs `protobuf:"bytes,2,opt,name=b,proto3,oneof"`
}

type Array_S struct {
	S *STRINGs `protobuf:"bytes,3,opt,name=s,proto3,oneof"`
}

type Array_D struct {
	D *DOUBLEs `protobuf:"bytes,4,opt,name=d,proto3,oneof"`
}

type Array_O struct {
	O *MumaxObjects `protobuf:"bytes,5,opt,name=o,proto3,oneof"`
}

type Array_A struct {
	A *Arrays `protobuf:"bytes,6,opt,name=a,proto3,oneof"`
}

func (*Array_I) isArray_Elements() {}

func (*Array_B) isArray_Elements() {}

func (*Array_S) isArray_Elements() {}

func (*Array_D) isArray_Elements() {}

func (*Array_O) isArray_Elements() {}

func (*Array_A) isArray_Elements() {}

type Arrays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S []*Array `protobuf:"bytes,1,rep,name=s,proto3" json:"s,omitempty"`
}

func (x *Arrays) Reset() {
	*x = Arrays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Arrays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Arrays) ProtoMessage() {}

func (x *Arrays) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Arrays.ProtoReflect.Descriptor instead.
func (*Arrays) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{17}
}

func (x *Arrays) GetS() []*Array {
	if x != nil {
		return x.S
	}
	return nil
}

type CallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutString []string       `protobuf:"bytes,2,rep,name=outString,proto3" json:"outString,omitempty"`
	OutBool   []bool         `protobuf:"varint,3,rep,packed,name=outBool,proto3" json:"outBool,omitempty"`
	OutDouble []float64      `protobuf:"fixed64,4,rep,packed,name=outDouble,proto3" json:"outDouble,omitempty"`
	OutInt    []int64        `protobuf:"varint,5,rep,packed,name=outInt,proto3" json:"outInt,omitempty"`
	OutMumax  []*MumaxObject `protobuf:"bytes,6,rep,name=outMumax,proto3" json:"outMumax,omitempty"`
	OutArray  []*Array       `protobuf:"bytes,7,rep,name=outArray,proto3" json:"outArray,omitempty"`
}

func (x *CallResponse) Reset() {
	*x = CallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallResponse) ProtoMessage() {}

func (x *CallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallResponse.ProtoReflect.Descriptor instead.
func (*CallResponse) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{18}
}

func (x *CallResponse) GetOutString() []string {
	if x != nil {
		return x.OutString
	}
	return nil
}

func (x *CallResponse) GetOutBool() []bool {
	if x != nil {
		return x.OutBool
	}
	return nil
}

func (x *CallResponse) GetOutDouble() []float64 {
	if x != nil {
		return x.OutDouble
	}
	return nil
}

func (x *CallResponse) GetOutInt() []int64 {
	if x != nil {
		return x.OutInt
	}
	return nil
}

func (x *CallResponse) GetOutMumax() []*MumaxObject {
	if x != nil {
		return x.OutMumax
	}
	return nil
}

func (x *CallResponse) GetOutArray() []*Array {
	if x != nil {
		return x.OutArray
	}
	return nil
}

type RevComRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Pyfunc:
	//
	//	*RevComRequest_Scalarpyfunc
	//	*RevComRequest_Vectorpyfunc
	//	*RevComRequest_Quantpyfunc
	Pyfunc isRevComRequest_Pyfunc `protobuf_oneof:"pyfunc"`
}

func (x *RevComRequest) Reset() {
	*x = RevComRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevComRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevComRequest) ProtoMessage() {}

func (x *RevComRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevComRequest.ProtoReflect.Descriptor instead.
func (*RevComRequest) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{19}
}

func (m *RevComRequest) GetPyfunc() isRevComRequest_Pyfunc {
	if m != nil {
		return m.Pyfunc
	}
	return nil
}

func (x *RevComRequest) GetScalarpyfunc() int64 {
	if x, ok := x.GetPyfunc().(*RevComRequest_Scalarpyfunc); ok {
		return x.Scalarpyfunc
	}
	return 0
}

func (x *RevComRequest) GetVectorpyfunc() int64 {
	if x, ok := x.GetPyfunc().(*RevComRequest_Vectorpyfunc); ok {
		return x.Vectorpyfunc
	}
	return 0
}

func (x *RevComRequest) GetQuantpyfunc() int64 {
	if x, ok := x.GetPyfunc().(*RevComRequest_Quantpyfunc); ok {
		return x.Quantpyfunc
	}
	return 0
}

type isRevComRequest_Pyfunc interface {
	isRevComRequest_Pyfunc()
}

type RevComRequest_Scalarpyfunc struct {
	Scalarpyfunc int64 `protobuf:"varint,1,opt,name=scalarpyfunc,proto3,oneof"`
}

type RevComRequest_Vectorpyfunc struct {
	Vectorpyfunc int64 `protobuf:"varint,2,opt,name=vectorpyfunc,proto3,oneof"`
}

type RevComRequest_Quantpyfunc struct {
	Quantpyfunc int64 `protobuf:"varint,3,opt,name=quantpyfunc,proto3,oneof"`
}

func (*RevComRequest_Scalarpyfunc) isRevComRequest_Pyfunc() {}

func (*RevComRequest_Vectorpyfunc) isRevComRequest_Pyfunc() {}

func (*RevComRequest_Quantpyfunc) isRevComRequest_Pyfunc() {}

type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{20}
}

func (x *Vector) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vector) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type RevComResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*RevComResult_Scalar
	//	*RevComResult_Vec
	//	*RevComResult_Quant
	Result isRevComResult_Result `protobuf_oneof:"result"`
}

func (x *RevComResult) Reset() {
	*x = RevComResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevComResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevComResult) ProtoMessage() {}

func (x *RevComResult) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevComResult.ProtoReflect.Descriptor instead.
func (*RevComResult) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{21}
}

func (m *RevComResult) GetResult() isRevComResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *RevComResult) GetScalar() float64 {
	if x, ok := x.GetResult().(*RevComResult_Scalar); ok {
		return x.Scalar
	}
	return 0
}

func (x *RevComResult) GetVec() *Vector {
	if x, ok := x.GetResult().(*RevComResult_Vec); ok {
		return x.Vec
	}
	return nil
}

func (x *RevComResult) GetQuant() *NULL {
	if x, ok := x.GetResult().(*RevComResult_Quant); ok {
		return x.Quant
	}
	return nil
}

type isRevComResult_Result interface {
	isRevComResult_Result()
}

type RevComResult_Scalar struct {
	Scalar float64 `protobuf:"fixed64,1,opt,name=scalar,proto3,oneof"`
}

type RevComResult_Vec struct {
	Vec *Vector `protobuf:"bytes,2,opt,name=vec,proto3,oneof"`
}

type RevComResult_Quant struct {
	Quant *NULL `protobuf:"bytes,3,opt,name=quant,proto3,oneof"`
}

func (*RevComResult_Scalar) isRevComResult_Result() {}

func (*RevComResult_Vec) isRevComResult_Result() {}

func (*RevComResult_Quant) isRevComResult_Result() {}

type MethodCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mmobj *MumaxObject  `protobuf:"bytes,1,opt,name=mmobj,proto3" json:"mmobj,omitempty"`
	Fc    *FunctionCall `protobuf:"bytes,2,opt,name=fc,proto3" json:"fc,omitempty"`
}

func (x *MethodCall) Reset() {
	*x = MethodCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodCall) ProtoMessage() {}

func (x *MethodCall) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodCall.ProtoReflect.Descriptor instead.
func (*MethodCall) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{22}
}

func (x *MethodCall) GetMmobj() *MumaxObject {
	if x != nil {
		return x.Mmobj
	}
	return nil
}

func (x *MethodCall) GetFc() *FunctionCall {
	if x != nil {
		return x.Fc
	}
	return nil
}

type MumaxField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mmobj     *MumaxObject `protobuf:"bytes,1,opt,name=mmobj,proto3" json:"mmobj,omitempty"`
	FieldName string       `protobuf:"bytes,2,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
}

func (x *MumaxField) Reset() {
	*x = MumaxField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MumaxField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MumaxField) ProtoMessage() {}

func (x *MumaxField) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MumaxField.ProtoReflect.Descriptor instead.
func (*MumaxField) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{23}
}

func (x *MumaxField) GetMmobj() *MumaxObject {
	if x != nil {
		return x.Mmobj
	}
	return nil
}

func (x *MumaxField) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

type BoolSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mmobj *MumaxObject `protobuf:"bytes,1,opt,name=mmobj,proto3" json:"mmobj,omitempty"`
	S     bool         `protobuf:"varint,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *BoolSet) Reset() {
	*x = BoolSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolSet) ProtoMessage() {}

func (x *BoolSet) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolSet.ProtoReflect.Descriptor instead.
func (*BoolSet) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{24}
}

func (x *BoolSet) GetMmobj() *MumaxObject {
	if x != nil {
		return x.Mmobj
	}
	return nil
}

func (x *BoolSet) GetS() bool {
	if x != nil {
		return x.S
	}
	return false
}

type IntSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mmobj *MumaxObject `protobuf:"bytes,1,opt,name=mmobj,proto3" json:"mmobj,omitempty"`
	S     int64        `protobuf:"varint,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *IntSet) Reset() {
	*x = IntSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntSet) ProtoMessage() {}

func (x *IntSet) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntSet.ProtoReflect.Descriptor instead.
func (*IntSet) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{25}
}

func (x *IntSet) GetMmobj() *MumaxObject {
	if x != nil {
		return x.Mmobj
	}
	return nil
}

func (x *IntSet) GetS() int64 {
	if x != nil {
		return x.S
	}
	return 0
}

type DoubleSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mmobj *MumaxObject `protobuf:"bytes,1,opt,name=mmobj,proto3" json:"mmobj,omitempty"`
	S     float64      `protobuf:"fixed64,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *DoubleSet) Reset() {
	*x = DoubleSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleSet) ProtoMessage() {}

func (x *DoubleSet) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleSet.ProtoReflect.Descriptor instead.
func (*DoubleSet) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{26}
}

func (x *DoubleSet) GetMmobj() *MumaxObject {
	if x != nil {
		return x.Mmobj
	}
	return nil
}

func (x *DoubleSet) GetS() float64 {
	if x != nil {
		return x.S
	}
	return 0
}

type StringSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mmobj *MumaxObject `protobuf:"bytes,1,opt,name=mmobj,proto3" json:"mmobj,omitempty"`
	S     string       `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *StringSet) Reset() {
	*x = StringSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringSet) ProtoMessage() {}

func (x *StringSet) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringSet.ProtoReflect.Descriptor instead.
func (*StringSet) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{27}
}

func (x *StringSet) GetMmobj() *MumaxObject {
	if x != nil {
		return x.Mmobj
	}
	return nil
}

func (x *StringSet) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

type VectorSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mmobj *MumaxObject `protobuf:"bytes,1,opt,name=mmobj,proto3" json:"mmobj,omitempty"`
	X     float64      `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	Y     float64      `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
	Z     float64      `protobuf:"fixed64,4,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *VectorSet) Reset() {
	*x = VectorSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorSet) ProtoMessage() {}

func (x *VectorSet) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorSet.ProtoReflect.Descriptor instead.
func (*VectorSet) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{28}
}

func (x *VectorSet) GetMmobj() *MumaxObject {
	if x != nil {
		return x.Mmobj
	}
	return nil
}

func (x *VectorSet) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *VectorSet) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *VectorSet) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type ScalarFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sf:
	//
	//	*ScalarFunction_Scalar
	//	*ScalarFunction_Gocode
	//	*ScalarFunction_Pyfunc
	Sf isScalarFunction_Sf `protobuf_oneof:"sf"`
}

func (x *ScalarFunction) Reset() {
	*x = ScalarFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarFunction) ProtoMessage() {}

func (x *ScalarFunction) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarFunction.ProtoReflect.Descriptor instead.
func (*ScalarFunction) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{29}
}

func (m *ScalarFunction) GetSf() isScalarFunction_Sf {
	if m != nil {
		return m.Sf
	}
	return nil
}

func (x *ScalarFunction) GetScalar() float64 {
	if x, ok := x.GetSf().(*ScalarFunction_Scalar); ok {
		return x.Scalar
	}
	return 0
}

func (x *ScalarFunction) GetGocode() string {
	if x, ok := x.GetSf().(*ScalarFunction_Gocode); ok {
		return x.Gocode
	}
	return ""
}

func (x *ScalarFunction) GetPyfunc() int64 {
	if x, ok := x.GetSf().(*ScalarFunction_Pyfunc); ok {
		return x.Pyfunc
	}
	return 0
}

type isScalarFunction_Sf interface {
	isScalarFunction_Sf()
}

type ScalarFunction_Scalar struct {
	Scalar float64 `protobuf:"fixed64,2,opt,name=scalar,proto3,oneof"`
}

type ScalarFunction_Gocode struct {
	Gocode string `protobuf:"bytes,3,opt,name=gocode,proto3,oneof"`
}

type ScalarFunction_Pyfunc struct {
	Pyfunc int64 `protobuf:"varint,4,opt,name=pyfunc,proto3,oneof"`
}

func (*ScalarFunction_Scalar) isScalarFunction_Sf() {}

func (*ScalarFunction_Gocode) isScalarFunction_Sf() {}

func (*ScalarFunction_Pyfunc) isScalarFunction_Sf() {}

type ScalarFunctionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mmobj *MumaxObject    `protobuf:"bytes,1,opt,name=mmobj,proto3" json:"mmobj,omitempty"`
	S     *ScalarFunction `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *ScalarFunctionSet) Reset() {
	*x = ScalarFunctionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarFunctionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarFunctionSet) ProtoMessage() {}

func (x *ScalarFunctionSet) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarFunctionSet.ProtoReflect.Descriptor instead.
func (*ScalarFunctionSet) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{30}
}

func (x *ScalarFunctionSet) GetMmobj() *MumaxObject {
	if x != nil {
		return x.Mmobj
	}
	return nil
}

func (x *ScalarFunctionSet) GetS() *ScalarFunction {
	if x != nil {
		return x.S
	}
	return nil
}

type ScalarFunction3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *ScalarFunction `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y *ScalarFunction `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
	Z *ScalarFunction `protobuf:"bytes,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *ScalarFunction3) Reset() {
	*x = ScalarFunction3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarFunction3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarFunction3) ProtoMessage() {}

func (x *ScalarFunction3) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarFunction3.ProtoReflect.Descriptor instead.
func (*ScalarFunction3) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{31}
}

func (x *ScalarFunction3) GetX() *ScalarFunction {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *ScalarFunction3) GetY() *ScalarFunction {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *ScalarFunction3) GetZ() *ScalarFunction {
	if x != nil {
		return x.Z
	}
	return nil
}

type VectorFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Vf:
	//
	//	*VectorFunction_Gocode
	//	*VectorFunction_Components
	//	*VectorFunction_Pyfunc
	Vf isVectorFunction_Vf `protobuf_oneof:"vf"`
}

func (x *VectorFunction) Reset() {
	*x = VectorFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorFunction) ProtoMessage() {}

func (x *VectorFunction) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorFunction.ProtoReflect.Descriptor instead.
func (*VectorFunction) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{32}
}

func (m *VectorFunction) GetVf() isVectorFunction_Vf {
	if m != nil {
		return m.Vf
	}
	return nil
}

func (x *VectorFunction) GetGocode() string {
	if x, ok := x.GetVf().(*VectorFunction_Gocode); ok {
		return x.Gocode
	}
	return ""
}

func (x *VectorFunction) GetComponents() *ScalarFunction3 {
	if x, ok := x.GetVf().(*VectorFunction_Components); ok {
		return x.Components
	}
	return nil
}

func (x *VectorFunction) GetPyfunc() int64 {
	if x, ok := x.GetVf().(*VectorFunction_Pyfunc); ok {
		return x.Pyfunc
	}
	return 0
}

type isVectorFunction_Vf interface {
	isVectorFunction_Vf()
}

type VectorFunction_Gocode struct {
	Gocode string `protobuf:"bytes,1,opt,name=gocode,proto3,oneof"`
}

type VectorFunction_Components struct {
	Components *ScalarFunction3 `protobuf:"bytes,2,opt,name=components,proto3,oneof"`
}

type VectorFunction_Pyfunc struct {
	Pyfunc int64 `protobuf:"varint,3,opt,name=pyfunc,proto3,oneof"`
}

func (*VectorFunction_Gocode) isVectorFunction_Vf() {}

func (*VectorFunction_Components) isVectorFunction_Vf() {}

func (*VectorFunction_Pyfunc) isVectorFunction_Vf() {}

type VectorFunctionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mmobj *MumaxObject    `protobuf:"bytes,1,opt,name=mmobj,proto3" json:"mmobj,omitempty"`
	S     *VectorFunction `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *VectorFunctionSet) Reset() {
	*x = VectorFunctionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorFunctionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorFunctionSet) ProtoMessage() {}

func (x *VectorFunctionSet) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorFunctionSet.ProtoReflect.Descriptor instead.
func (*VectorFunctionSet) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{33}
}

func (x *VectorFunctionSet) GetMmobj() *MumaxObject {
	if x != nil {
		return x.Mmobj
	}
	return nil
}

func (x *VectorFunctionSet) GetS() *VectorFunction {
	if x != nil {
		return x.S
	}
	return nil
}

type MumaxSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mmobj *MumaxObject `protobuf:"bytes,1,opt,name=mmobj,proto3" json:"mmobj,omitempty"`
	S     *MumaxObject `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *MumaxSet) Reset() {
	*x = MumaxSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MumaxSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MumaxSet) ProtoMessage() {}

func (x *MumaxSet) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MumaxSet.ProtoReflect.Descriptor instead.
func (*MumaxSet) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{34}
}

func (x *MumaxSet) GetMmobj() *MumaxObject {
	if x != nil {
		return x.Mmobj
	}
	return nil
}

func (x *MumaxSet) GetS() *MumaxObject {
	if x != nil {
		return x.S
	}
	return nil
}

type Slice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ncomp int64  `protobuf:"varint,1,opt,name=ncomp,proto3" json:"ncomp,omitempty"`
	Nx    int64  `protobuf:"varint,2,opt,name=nx,proto3" json:"nx,omitempty"`
	Ny    int64  `protobuf:"varint,3,opt,name=ny,proto3" json:"ny,omitempty"`
	Nz    int64  `protobuf:"varint,4,opt,name=nz,proto3" json:"nz,omitempty"`
	File  string `protobuf:"bytes,5,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *Slice) Reset() {
	*x = Slice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slice) ProtoMessage() {}

func (x *Slice) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slice.ProtoReflect.Descriptor instead.
func (*Slice) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{35}
}

func (x *Slice) GetNcomp() int64 {
	if x != nil {
		return x.Ncomp
	}
	return 0
}

func (x *Slice) GetNx() int64 {
	if x != nil {
		return x.Nx
	}
	return 0
}

func (x *Slice) GetNy() int64 {
	if x != nil {
		return x.Ny
	}
	return 0
}

func (x *Slice) GetNz() int64 {
	if x != nil {
		return x.Nz
	}
	return 0
}

func (x *Slice) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

type GPUSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ncomp  int64  `protobuf:"varint,1,opt,name=ncomp,proto3" json:"ncomp,omitempty"`
	Nx     int64  `protobuf:"varint,2,opt,name=nx,proto3" json:"nx,omitempty"`
	Ny     int64  `protobuf:"varint,3,opt,name=ny,proto3" json:"ny,omitempty"`
	Nz     int64  `protobuf:"varint,4,opt,name=nz,proto3" json:"nz,omitempty"`
	Handle []byte `protobuf:"bytes,5,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *GPUSlice) Reset() {
	*x = GPUSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUSlice) ProtoMessage() {}

func (x *GPUSlice) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUSlice.ProtoReflect.Descriptor instead.
func (*GPUSlice) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{36}
}

func (x *GPUSlice) GetNcomp() int64 {
	if x != nil {
		return x.Ncomp
	}
	return 0
}

func (x *GPUSlice) GetNx() int64 {
	if x != nil {
		return x.Nx
	}
	return 0
}

func (x *GPUSlice) GetNy() int64 {
	if x != nil {
		return x.Ny
	}
	return 0
}

func (x *GPUSlice) GetNz() int64 {
	if x != nil {
		return x.Nz
	}
	return 0
}

func (x *GPUSlice) GetHandle() []byte {
	if x != nil {
		return x.Handle
	}
	return nil
}

type GPUSliceMM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ncomp   int64    `protobuf:"varint,1,opt,name=ncomp,proto3" json:"ncomp,omitempty"`
	Nx      int64    `protobuf:"varint,2,opt,name=nx,proto3" json:"nx,omitempty"`
	Ny      int64    `protobuf:"varint,3,opt,name=ny,proto3" json:"ny,omitempty"`
	Nz      int64    `protobuf:"varint,4,opt,name=nz,proto3" json:"nz,omitempty"`
	Handles [][]byte `protobuf:"bytes,5,rep,name=handles,proto3" json:"handles,omitempty"`
}

func (x *GPUSliceMM) Reset() {
	*x = GPUSliceMM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUSliceMM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUSliceMM) ProtoMessage() {}

func (x *GPUSliceMM) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUSliceMM.ProtoReflect.Descriptor instead.
func (*GPUSliceMM) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{37}
}

func (x *GPUSliceMM) GetNcomp() int64 {
	if x != nil {
		return x.Ncomp
	}
	return 0
}

func (x *GPUSliceMM) GetNx() int64 {
	if x != nil {
		return x.Nx
	}
	return 0
}

func (x *GPUSliceMM) GetNy() int64 {
	if x != nil {
		return x.Ny
	}
	return 0
}

func (x *GPUSliceMM) GetNz() int64 {
	if x != nil {
		return x.Nz
	}
	return 0
}

func (x *GPUSliceMM) GetHandles() [][]byte {
	if x != nil {
		return x.Handles
	}
	return nil
}

type PyQuant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ncomp  int64 `protobuf:"varint,1,opt,name=ncomp,proto3" json:"ncomp,omitempty"`
	Funcno int64 `protobuf:"varint,2,opt,name=funcno,proto3" json:"funcno,omitempty"`
}

func (x *PyQuant) Reset() {
	*x = PyQuant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PyQuant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PyQuant) ProtoMessage() {}

func (x *PyQuant) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PyQuant.ProtoReflect.Descriptor instead.
func (*PyQuant) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{38}
}

func (x *PyQuant) GetNcomp() int64 {
	if x != nil {
		return x.Ncomp
	}
	return 0
}

func (x *PyQuant) GetFuncno() int64 {
	if x != nil {
		return x.Funcno
	}
	return 0
}

type Quantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Q:
	//
	//	*Quantity_Mmobj
	//	*Quantity_Gocode
	//	*Quantity_Py
	Q isQuantity_Q `protobuf_oneof:"q"`
}

func (x *Quantity) Reset() {
	*x = Quantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quantity) ProtoMessage() {}

func (x *Quantity) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quantity.ProtoReflect.Descriptor instead.
func (*Quantity) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{39}
}

func (m *Quantity) GetQ() isQuantity_Q {
	if m != nil {
		return m.Q
	}
	return nil
}

func (x *Quantity) GetMmobj() *MumaxObject {
	if x, ok := x.GetQ().(*Quantity_Mmobj); ok {
		return x.Mmobj
	}
	return nil
}

func (x *Quantity) GetGocode() string {
	if x, ok := x.GetQ().(*Quantity_Gocode); ok {
		return x.Gocode
	}
	return ""
}

func (x *Quantity) GetPy() *PyQuant {
	if x, ok := x.GetQ().(*Quantity_Py); ok {
		return x.Py
	}
	return nil
}

type isQuantity_Q interface {
	isQuantity_Q()
}

type Quantity_Mmobj struct {
	Mmobj *MumaxObject `protobuf:"bytes,1,opt,name=mmobj,proto3,oneof"`
}

type Quantity_Gocode struct {
	Gocode string `protobuf:"bytes,2,opt,name=gocode,proto3,oneof"`
}

type Quantity_Py struct {
	Py *PyQuant `protobuf:"bytes,3,opt,name=py,proto3,oneof"`
}

func (*Quantity_Mmobj) isQuantity_Q() {}

func (*Quantity_Gocode) isQuantity_Q() {}

func (*Quantity_Py) isQuantity_Q() {}

type RevComQuantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Funcno int64       `protobuf:"varint,1,opt,name=funcno,proto3" json:"funcno,omitempty"`
	Sl     *GPUSliceMM `protobuf:"bytes,2,opt,name=sl,proto3" json:"sl,omitempty"`
}

func (x *RevComQuantRequest) Reset() {
	*x = RevComQuantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mumax_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevComQuantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevComQuantRequest) ProtoMessage() {}

func (x *RevComQuantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mumax_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevComQuantRequest.ProtoReflect.Descriptor instead.
func (*RevComQuantRequest) Descriptor() ([]byte, []int) {
	return file_mumax_proto_rawDescGZIP(), []int{40}
}

func (x *RevComQuantRequest) GetFuncno() int64 {
	if x != nil {
		return x.Funcno
	}
	return 0
}

func (x *RevComQuantRequest) GetSl() *GPUSliceMM {
	if x != nil {
		return x.Sl
	}
	return nil
}

var File_mumax_proto protoreflect.FileDescriptor

var file_mumax_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d,
	0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x22, 0x06, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x22, 0x16,
	0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x73, 0x22, 0x17, 0x0a, 0x07, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x73, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x01, 0x73, 0x22,
	0x14, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x01, 0x73, 0x22, 0x15, 0x0a, 0x05, 0x42, 0x4f, 0x4f, 0x4c, 0x73, 0x12, 0x0c,
	0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x01, 0x73, 0x22, 0x13, 0x0a, 0x03,
	0x49, 0x4e, 0x54, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01,
	0x73, 0x22, 0x14, 0x0a, 0x04, 0x49, 0x4e, 0x54, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x01, 0x73, 0x22, 0x16, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c,
	0x45, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x73, 0x22,
	0x17, 0x0a, 0x07, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x01, 0x73, 0x22, 0x5e, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x67, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x06, 0x4c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x1b, 0x0a, 0x05, 0x52, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x1f, 0x0a, 0x01, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x01, 0x6c, 0x12, 0x1e, 0x0a, 0x01, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x52, 0x4f, 0x6e,
	0x6c, 0x79, 0x48, 0x00, 0x52, 0x01, 0x72, 0x12, 0x21, 0x0a, 0x01, 0x66, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x01, 0x66, 0x42, 0x07, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x73, 0x22, 0x43, 0x0a, 0x0b, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x70, 0x74, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x70, 0x74, 0x72, 0x42, 0x0a, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x32, 0x0a, 0x0c, 0x4d, 0x75, 0x6d, 0x61,
	0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75,
	0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x01, 0x73, 0x22, 0x85, 0x03, 0x0a,
	0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x72, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x07, 0x61, 0x72, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x61, 0x72,
	0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x67, 0x49, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x67, 0x49, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61,
	0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x67, 0x4d, 0x75, 0x6d, 0x61,
	0x78, 0x12, 0x45, 0x0a, 0x11, 0x61, 0x72, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x72, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x11, 0x61, 0x72, 0x67, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x72,
	0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x0b, 0x61, 0x72, 0x67, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x61, 0x72, 0x67, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0xde, 0x01, 0x0a, 0x05, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1d,
	0x0a, 0x01, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x75, 0x6d, 0x61,
	0x78, 0x70, 0x79, 0x2e, 0x49, 0x4e, 0x54, 0x73, 0x48, 0x00, 0x52, 0x01, 0x69, 0x12, 0x1e, 0x0a,
	0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78,
	0x70, 0x79, 0x2e, 0x42, 0x4f, 0x4f, 0x4c, 0x73, 0x48, 0x00, 0x52, 0x01, 0x62, 0x12, 0x20, 0x0a,
	0x01, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78,
	0x70, 0x79, 0x2e, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x73, 0x48, 0x00, 0x52, 0x01, 0x73, 0x12,
	0x20, 0x0a, 0x01, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x75, 0x6d,
	0x61, 0x78, 0x70, 0x79, 0x2e, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x73, 0x48, 0x00, 0x52, 0x01,
	0x64, 0x12, 0x25, 0x0a, 0x01, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x48, 0x00, 0x52, 0x01, 0x6f, 0x12, 0x1f, 0x0a, 0x01, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x73, 0x48, 0x00, 0x52, 0x01, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x26, 0x0a, 0x06, 0x41, 0x72, 0x72, 0x61, 0x79, 0x73, 0x12,
	0x1c, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x75, 0x6d,
	0x61, 0x78, 0x70, 0x79, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x01, 0x73, 0x22, 0xda, 0x01,
	0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x12, 0x2a,
	0x0a, 0x08, 0x6f, 0x75, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x52, 0x08, 0x6f, 0x75, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x76, 0x43, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0c,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x70, 0x79, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x70, 0x79, 0x66, 0x75,
	0x6e, 0x63, 0x12, 0x24, 0x0a, 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x70, 0x79, 0x66, 0x75,
	0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x70, 0x79, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x22, 0x0a, 0x0b, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x70, 0x79, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x0b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x70, 0x79, 0x66, 0x75, 0x6e, 0x63, 0x42, 0x08, 0x0a, 0x06,
	0x70, 0x79, 0x66, 0x75, 0x6e, 0x63, 0x22, 0x32, 0x0a, 0x06, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01,
	0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x22, 0x7e, 0x0a, 0x0c, 0x52, 0x65,
	0x76, 0x43, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x12, 0x23, 0x0a, 0x03, 0x76, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x03, 0x76, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x05, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78,
	0x70, 0x79, 0x2e, 0x4e, 0x55, 0x4c, 0x4c, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5f, 0x0a, 0x0a, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x6d, 0x6d, 0x6f, 0x62,
	0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70,
	0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x6d,
	0x6d, 0x6f, 0x62, 0x6a, 0x12, 0x25, 0x0a, 0x02, 0x66, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x02, 0x66, 0x63, 0x22, 0x56, 0x0a, 0x0a, 0x4d,
	0x75, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x6d, 0x6d, 0x6f,
	0x62, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78,
	0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05,
	0x6d, 0x6d, 0x6f, 0x62, 0x6a, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x2a,
	0x0a, 0x05, 0x6d, 0x6d, 0x6f, 0x62, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x05, 0x6d, 0x6d, 0x6f, 0x62, 0x6a, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x73, 0x22, 0x42, 0x0a, 0x06, 0x49, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x6d, 0x6d, 0x6f, 0x62, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61,
	0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x6d, 0x6d, 0x6f, 0x62, 0x6a, 0x12, 0x0c,
	0x0a, 0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x73, 0x22, 0x45, 0x0a, 0x09,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x6d, 0x6d, 0x6f,
	0x62, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78,
	0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05,
	0x6d, 0x6d, 0x6f, 0x62, 0x6a, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x01, 0x73, 0x22, 0x45, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x12, 0x2a, 0x0a, 0x05, 0x6d, 0x6d, 0x6f, 0x62, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x6d, 0x6d, 0x6f, 0x62, 0x6a, 0x12, 0x0c, 0x0a, 0x01,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x73, 0x22, 0x61, 0x0a, 0x09, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x6d, 0x6d, 0x6f, 0x62, 0x6a,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79,
	0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x6d, 0x6d,
	0x6f, 0x62, 0x6a, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x22, 0x64, 0x0a,
	0x0e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x67, 0x6f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x70, 0x79, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x70, 0x79, 0x66, 0x75, 0x6e, 0x63, 0x42, 0x04, 0x0a,
	0x02, 0x73, 0x66, 0x22, 0x66, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x6d, 0x6d, 0x6f, 0x62,
	0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70,
	0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x6d,
	0x6d, 0x6f, 0x62, 0x6a, 0x12, 0x25, 0x0a, 0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x01, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0f,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x12,
	0x25, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x75, 0x6d,
	0x61, 0x78, 0x70, 0x79, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x01, 0x78, 0x12, 0x25, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x01, 0x79, 0x12, 0x25, 0x0a,
	0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78,
	0x70, 0x79, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x01, 0x7a, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x67, 0x6f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6f, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x48,
	0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x06, 0x70, 0x79, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x79, 0x66, 0x75, 0x6e, 0x63, 0x42, 0x04, 0x0a, 0x02, 0x76, 0x66, 0x22, 0x66, 0x0a,
	0x11, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x6d, 0x6d, 0x6f, 0x62, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61,
	0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x6d, 0x6d, 0x6f, 0x62, 0x6a, 0x12, 0x25,
	0x0a, 0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x75, 0x6d, 0x61,
	0x78, 0x70, 0x79, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x01, 0x73, 0x22, 0x5a, 0x0a, 0x08, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x53, 0x65,
	0x74, 0x12, 0x2a, 0x0a, 0x05, 0x6d, 0x6d, 0x6f, 0x62, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x6d, 0x6d, 0x6f, 0x62, 0x6a, 0x12, 0x22, 0x0a,
	0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78,
	0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x01,
	0x73, 0x22, 0x61, 0x0a, 0x05, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x63,
	0x6f, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6e, 0x78,
	0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6e, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6e, 0x7a,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x68, 0x0a, 0x08, 0x47, 0x50, 0x55, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x6e, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x6e, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x7a, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x6e, 0x7a, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x6c,
	0x0a, 0x0a, 0x47, 0x50, 0x55, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4d, 0x4d, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x6e, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x6e, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x6e, 0x7a, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x07,
	0x50, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x75, 0x6e, 0x63, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66,
	0x75, 0x6e, 0x63, 0x6e, 0x6f, 0x22, 0x7b, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x6d, 0x6f, 0x62, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6d, 0x6f, 0x62, 0x6a, 0x12,
	0x18, 0x0a, 0x06, 0x67, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x67, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x02, 0x70, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e,
	0x50, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x02, 0x70, 0x79, 0x42, 0x03, 0x0a,
	0x01, 0x71, 0x22, 0x51, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x43, 0x6f, 0x6d, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x75, 0x6e, 0x63,
	0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x63, 0x6e, 0x6f,
	0x12, 0x23, 0x0a, 0x02, 0x73, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x47, 0x50, 0x55, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4d,
	0x4d, 0x52, 0x02, 0x73, 0x6c, 0x32, 0xec, 0x0b, 0x0a, 0x05, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x12,
	0x28, 0x0a, 0x04, 0x45, 0x76, 0x61, 0x6c, 0x12, 0x0f, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70,
	0x79, 0x2e, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x1a, 0x0d, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78,
	0x70, 0x79, 0x2e, 0x4e, 0x55, 0x4c, 0x4c, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x0d, 0x2e, 0x6d, 0x75,
	0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4e, 0x55, 0x4c, 0x4c, 0x1a, 0x13, 0x2e, 0x6d, 0x75, 0x6d,
	0x61, 0x78, 0x70, 0x79, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x1a, 0x13, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x36, 0x0a, 0x04,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x15, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x15, 0x2e, 0x6d, 0x75,
	0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x13, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x1a, 0x15, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70,
	0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78,
	0x70, 0x79, 0x2e, 0x52, 0x65, 0x76, 0x43, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a,
	0x16, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x52, 0x65, 0x76, 0x43, 0x6f, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x52, 0x0a,
	0x1e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x0d, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4e, 0x55, 0x4c, 0x4c, 0x1a, 0x1b,
	0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x52, 0x65, 0x76, 0x43, 0x6f, 0x6d, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x30, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x2e, 0x6d,
	0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x42, 0x4f, 0x4f,
	0x4c, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x12, 0x14, 0x2e,
	0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x1a, 0x0c, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x49, 0x4e,
	0x54, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x0f, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79,
	0x2e, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79,
	0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x0f, 0x2e, 0x6d,
	0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x22, 0x00, 0x12,
	0x2c, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x10, 0x2e, 0x6d, 0x75, 0x6d,
	0x61, 0x78, 0x70, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x1a, 0x0d, 0x2e, 0x6d,
	0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4e, 0x55, 0x4c, 0x4c, 0x22, 0x00, 0x12, 0x2a, 0x0a,
	0x06, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70,
	0x79, 0x2e, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78,
	0x70, 0x79, 0x2e, 0x4e, 0x55, 0x4c, 0x4c, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x09, 0x53, 0x65, 0x74,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x75, 0x6d,
	0x61, 0x78, 0x70, 0x79, 0x2e, 0x4e, 0x55, 0x4c, 0x4c, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x09, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78,
	0x70, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x1a, 0x0d, 0x2e, 0x6d,
	0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4e, 0x55, 0x4c, 0x4c, 0x22, 0x00, 0x12, 0x30, 0x0a,
	0x09, 0x53, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x2e, 0x6d, 0x75, 0x6d,
	0x61, 0x78, 0x70, 0x79, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x1a, 0x0d,
	0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4e, 0x55, 0x4c, 0x4c, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x1a, 0x0d, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4e, 0x55, 0x4c, 0x4c, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4e, 0x55, 0x4c,
	0x4c, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x12,
	0x11, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x53,
	0x65, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4e, 0x55, 0x4c,
	0x4c, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x13, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75,
	0x6d, 0x61, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78,
	0x70, 0x79, 0x2e, 0x42, 0x4f, 0x4f, 0x4c, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x13, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78,
	0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x0c, 0x2e,
	0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x49, 0x4e, 0x54, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x13, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x1a, 0x0f, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x6d, 0x75, 0x6d, 0x61,
	0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x0f,
	0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x22,
	0x00, 0x12, 0x3c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x75, 0x6d,
	0x61, 0x78, 0x12, 0x13, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d,
	0x61, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70,
	0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x12,
	0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e,
	0x4e, 0x55, 0x4c, 0x4c, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x12, 0x0e, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x1a, 0x14, 0x2e, 0x6d, 0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d,
	0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b, 0x4e, 0x65,
	0x77, 0x47, 0x50, 0x55, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x11, 0x2e, 0x6d, 0x75, 0x6d, 0x61,
	0x78, 0x70, 0x79, 0x2e, 0x47, 0x50, 0x55, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x1a, 0x14, 0x2e, 0x6d,
	0x75, 0x6d, 0x61, 0x78, 0x70, 0x79, 0x2e, 0x4d, 0x75, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x00, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_mumax_proto_rawDescOnce sync.Once
	file_mumax_proto_rawDescData = file_mumax_proto_rawDesc
)

func file_mumax_proto_rawDescGZIP() []byte {
	file_mumax_proto_rawDescOnce.Do(func() {
		file_mumax_proto_rawDescData = protoimpl.X.CompressGZIP(file_mumax_proto_rawDescData)
	})
	return file_mumax_proto_rawDescData
}

var file_mumax_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_mumax_proto_goTypes = []interface{}{
	(*NULL)(nil),               // 0: mumaxpy.NULL
	(*STRING)(nil),             // 1: mumaxpy.STRING
	(*STRINGs)(nil),            // 2: mumaxpy.STRINGs
	(*BOOL)(nil),               // 3: mumaxpy.BOOL
	(*BOOLs)(nil),              // 4: mumaxpy.BOOLs
	(*INT)(nil),                // 5: mumaxpy.INT
	(*INTs)(nil),               // 6: mumaxpy.INTs
	(*DOUBLE)(nil),             // 7: mumaxpy.DOUBLE
	(*DOUBLEs)(nil),            // 8: mumaxpy.DOUBLEs
	(*Function)(nil),           // 9: mumaxpy.Function
	(*LValue)(nil),             // 10: mumaxpy.LValue
	(*ROnly)(nil),              // 11: mumaxpy.ROnly
	(*Identifier)(nil),         // 12: mumaxpy.Identifier
	(*MumaxObject)(nil),        // 13: mumaxpy.MumaxObject
	(*MumaxObjects)(nil),       // 14: mumaxpy.MumaxObjects
	(*FunctionCall)(nil),       // 15: mumaxpy.FunctionCall
	(*Array)(nil),              // 16: mumaxpy.Array
	(*Arrays)(nil),             // 17: mumaxpy.Arrays
	(*CallResponse)(nil),       // 18: mumaxpy.CallResponse
	(*RevComRequest)(nil),      // 19: mumaxpy.RevComRequest
	(*Vector)(nil),             // 20: mumaxpy.Vector
	(*RevComResult)(nil),       // 21: mumaxpy.RevComResult
	(*MethodCall)(nil),         // 22: mumaxpy.MethodCall
	(*MumaxField)(nil),         // 23: mumaxpy.MumaxField
	(*BoolSet)(nil),            // 24: mumaxpy.BoolSet
	(*IntSet)(nil),             // 25: mumaxpy.IntSet
	(*DoubleSet)(nil),          // 26: mumaxpy.DoubleSet
	(*StringSet)(nil),          // 27: mumaxpy.StringSet
	(*VectorSet)(nil),          // 28: mumaxpy.VectorSet
	(*ScalarFunction)(nil),     // 29: mumaxpy.ScalarFunction
	(*ScalarFunctionSet)(nil),  // 30: mumaxpy.ScalarFunctionSet
	(*ScalarFunction3)(nil),    // 31: mumaxpy.ScalarFunction3
	(*VectorFunction)(nil),     // 32: mumaxpy.VectorFunction
	(*VectorFunctionSet)(nil),  // 33: mumaxpy.VectorFunctionSet
	(*MumaxSet)(nil),           // 34: mumaxpy.MumaxSet
	(*Slice)(nil),              // 35: mumaxpy.Slice
	(*GPUSlice)(nil),           // 36: mumaxpy.GPUSlice
	(*GPUSliceMM)(nil),         // 37: mumaxpy.GPUSliceMM
	(*PyQuant)(nil),            // 38: mumaxpy.PyQuant
	(*Quantity)(nil),           // 39: mumaxpy.Quantity
	(*RevComQuantRequest)(nil), // 40: mumaxpy.RevComQuantRequest
}
var file_mumax_proto_depIdxs = []int32{
	10, // 0: mumaxpy.Identifier.l:type_name -> mumaxpy.LValue
	11, // 1: mumaxpy.Identifier.r:type_name -> mumaxpy.ROnly
	9,  // 2: mumaxpy.Identifier.f:type_name -> mumaxpy.Function
	13, // 3: mumaxpy.MumaxObjects.s:type_name -> mumaxpy.MumaxObject
	13, // 4: mumaxpy.FunctionCall.argMumax:type_name -> mumaxpy.MumaxObject
	29, // 5: mumaxpy.FunctionCall.argScalarFunction:type_name -> mumaxpy.ScalarFunction
	32, // 6: mumaxpy.FunctionCall.argVectorFunction:type_name -> mumaxpy.VectorFunction
	39, // 7: mumaxpy.FunctionCall.argQuantity:type_name -> mumaxpy.Quantity
	6,  // 8: mumaxpy.Array.i:type_name -> mumaxpy.INTs
	4,  // 9: mumaxpy.Array.b:type_name -> mumaxpy.BOOLs
	2,  // 10: mumaxpy.Array.s:type_name -> mumaxpy.STRINGs
	8,  // 11: mumaxpy.Array.d:type_name -> mumaxpy.DOUBLEs
	14, // 12: mumaxpy.Array.o:type_name -> mumaxpy.MumaxObjects
	17, // 13: mumaxpy.Array.a:type_name -> mumaxpy.Arrays
	16, // 14: mumaxpy.Arrays.s:type_name -> mumaxpy.Array
	13, // 15: mumaxpy.CallResponse.outMumax:type_name -> mumaxpy.MumaxObject
	16, // 16: mumaxpy.CallResponse.outArray:type_name -> mumaxpy.Array
	20, // 17: mumaxpy.RevComResult.vec:type_name -> mumaxpy.Vector
	0,  // 18: mumaxpy.RevComResult.quant:type_name -> mumaxpy.NULL
	13, // 19: mumaxpy.MethodCall.mmobj:type_name -> mumaxpy.MumaxObject
	15, // 20: mumaxpy.MethodCall.fc:type_name -> mumaxpy.FunctionCall
	13, // 21: mumaxpy.MumaxField.mmobj:type_name -> mumaxpy.MumaxObject
	13, // 22: mumaxpy.BoolSet.mmobj:type_name -> mumaxpy.MumaxObject
	13, // 23: mumaxpy.IntSet.mmobj:type_name -> mumaxpy.MumaxObject
	13, // 24: mumaxpy.DoubleSet.mmobj:type_name -> mumaxpy.MumaxObject
	13, // 25: mumaxpy.StringSet.mmobj:type_name -> mumaxpy.MumaxObject
	13, // 26: mumaxpy.VectorSet.mmobj:type_name -> mumaxpy.MumaxObject
	13, // 27: mumaxpy.ScalarFunctionSet.mmobj:type_name -> mumaxpy.MumaxObject
	29, // 28: mumaxpy.ScalarFunctionSet.s:type_name -> mumaxpy.ScalarFunction
	29, // 29: mumaxpy.ScalarFunction3.x:type_name -> mumaxpy.ScalarFunction
	29, // 30: mumaxpy.ScalarFunction3.y:type_name -> mumaxpy.ScalarFunction
	29, // 31: mumaxpy.ScalarFunction3.z:type_name -> mumaxpy.ScalarFunction
	31, // 32: mumaxpy.VectorFunction.components:type_name -> mumaxpy.ScalarFunction3
	13, // 33: mumaxpy.VectorFunctionSet.mmobj:type_name -> mumaxpy.MumaxObject
	32, // 34: mumaxpy.VectorFunctionSet.s:type_name -> mumaxpy.VectorFunction
	13, // 35: mumaxpy.MumaxSet.mmobj:type_name -> mumaxpy.MumaxObject
	13, // 36: mumaxpy.MumaxSet.s:type_name -> mumaxpy.MumaxObject
	13, // 37: mumaxpy.Quantity.mmobj:type_name -> mumaxpy.MumaxObject
	38, // 38: mumaxpy.Quantity.py:type_name -> mumaxpy.PyQuant
	37, // 39: mumaxpy.RevComQuantRequest.sl:type_name -> mumaxpy.GPUSliceMM
	1,  // 40: mumaxpy.mumax.Eval:input_type -> mumaxpy.STRING
	0,  // 41: mumaxpy.mumax.GetIdentifiers:input_type -> mumaxpy.NULL
	1,  // 42: mumaxpy.mumax.GetTypeInfo:input_type -> mumaxpy.STRING
	15, // 43: mumaxpy.mumax.Call:input_type -> mumaxpy.FunctionCall
	22, // 44: mumaxpy.mumax.CallMethod:input_type -> mumaxpy.MethodCall
	21, // 45: mumaxpy.mumax.ReverseCommunication:input_type -> mumaxpy.RevComResult
	0,  // 46: mumaxpy.mumax.ReverseCommunicationQuantities:input_type -> mumaxpy.NULL
	13, // 47: mumaxpy.mumax.GetBool:input_type -> mumaxpy.MumaxObject
	13, // 48: mumaxpy.mumax.GetInt:input_type -> mumaxpy.MumaxObject
	13, // 49: mumaxpy.mumax.GetString:input_type -> mumaxpy.MumaxObject
	13, // 50: mumaxpy.mumax.GetDouble:input_type -> mumaxpy.MumaxObject
	24, // 51: mumaxpy.mumax.SetBool:input_type -> mumaxpy.BoolSet
	25, // 52: mumaxpy.mumax.SetInt:input_type -> mumaxpy.IntSet
	26, // 53: mumaxpy.mumax.SetDouble:input_type -> mumaxpy.DoubleSet
	27, // 54: mumaxpy.mumax.SetString:input_type -> mumaxpy.StringSet
	28, // 55: mumaxpy.mumax.SetVector:input_type -> mumaxpy.VectorSet
	30, // 56: mumaxpy.mumax.SetScalarFunction:input_type -> mumaxpy.ScalarFunctionSet
	33, // 57: mumaxpy.mumax.SetVectorFunction:input_type -> mumaxpy.VectorFunctionSet
	34, // 58: mumaxpy.mumax.SetMumax:input_type -> mumaxpy.MumaxSet
	23, // 59: mumaxpy.mumax.GetFieldBool:input_type -> mumaxpy.MumaxField
	23, // 60: mumaxpy.mumax.GetFieldInt:input_type -> mumaxpy.MumaxField
	23, // 61: mumaxpy.mumax.GetFieldString:input_type -> mumaxpy.MumaxField
	23, // 62: mumaxpy.mumax.GetFieldDouble:input_type -> mumaxpy.MumaxField
	23, // 63: mumaxpy.mumax.GetFieldMumax:input_type -> mumaxpy.MumaxField
	13, // 64: mumaxpy.mumax.DestroyMumax:input_type -> mumaxpy.MumaxObject
	35, // 65: mumaxpy.mumax.NewSlice:input_type -> mumaxpy.Slice
	36, // 66: mumaxpy.mumax.NewGPUSlice:input_type -> mumaxpy.GPUSlice
	0,  // 67: mumaxpy.mumax.Eval:output_type -> mumaxpy.NULL
	12, // 68: mumaxpy.mumax.GetIdentifiers:output_type -> mumaxpy.Identifier
	12, // 69: mumaxpy.mumax.GetTypeInfo:output_type -> mumaxpy.Identifier
	18, // 70: mumaxpy.mumax.Call:output_type -> mumaxpy.CallResponse
	18, // 71: mumaxpy.mumax.CallMethod:output_type -> mumaxpy.CallResponse
	19, // 72: mumaxpy.mumax.ReverseCommunication:output_type -> mumaxpy.RevComRequest
	40, // 73: mumaxpy.mumax.ReverseCommunicationQuantities:output_type -> mumaxpy.RevComQuantRequest
	3,  // 74: mumaxpy.mumax.GetBool:output_type -> mumaxpy.BOOL
	5,  // 75: mumaxpy.mumax.GetInt:output_type -> mumaxpy.INT
	1,  // 76: mumaxpy.mumax.GetString:output_type -> mumaxpy.STRING
	7,  // 77: mumaxpy.mumax.GetDouble:output_type -> mumaxpy.DOUBLE
	0,  // 78: mumaxpy.mumax.SetBool:output_type -> mumaxpy.NULL
	0,  // 79: mumaxpy.mumax.SetInt:output_type -> mumaxpy.NULL
	0,  // 80: mumaxpy.mumax.SetDouble:output_type -> mumaxpy.NULL
	0,  // 81: mumaxpy.mumax.SetString:output_type -> mumaxpy.NULL
	0,  // 82: mumaxpy.mumax.SetVector:output_type -> mumaxpy.NULL
	0,  // 83: mumaxpy.mumax.SetScalarFunction:output_type -> mumaxpy.NULL
	0,  // 84: mumaxpy.mumax.SetVectorFunction:output_type -> mumaxpy.NULL
	0,  // 85: mumaxpy.mumax.SetMumax:output_type -> mumaxpy.NULL
	3,  // 86: mumaxpy.mumax.GetFieldBool:output_type -> mumaxpy.BOOL
	5,  // 87: mumaxpy.mumax.GetFieldInt:output_type -> mumaxpy.INT
	1,  // 88: mumaxpy.mumax.GetFieldString:output_type -> mumaxpy.STRING
	7,  // 89: mumaxpy.mumax.GetFieldDouble:output_type -> mumaxpy.DOUBLE
	13, // 90: mumaxpy.mumax.GetFieldMumax:output_type -> mumaxpy.MumaxObject
	0,  // 91: mumaxpy.mumax.DestroyMumax:output_type -> mumaxpy.NULL
	13, // 92: mumaxpy.mumax.NewSlice:output_type -> mumaxpy.MumaxObject
	13, // 93: mumaxpy.mumax.NewGPUSlice:output_type -> mumaxpy.MumaxObject
	67, // [67:94] is the sub-list for method output_type
	40, // [40:67] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_mumax_proto_init() }
func file_mumax_proto_init() {
	if File_mumax_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mumax_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NULL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STRING); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STRINGs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BOOL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BOOLs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*INT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*INTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DOUBLE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DOUBLEs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ROnly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MumaxObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MumaxObjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Arrays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevComRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevComResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MumaxField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarFunctionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarFunction3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorFunctionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MumaxSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUSliceMM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PyQuant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mumax_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevComQuantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mumax_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Identifier_L)(nil),
		(*Identifier_R)(nil),
		(*Identifier_F)(nil),
	}
	file_mumax_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*MumaxObject_Name)(nil),
		(*MumaxObject_Ptr)(nil),
	}
	file_mumax_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Array_I)(nil),
		(*Array_B)(nil),
		(*Array_S)(nil),
		(*Array_D)(nil),
		(*Array_O)(nil),
		(*Array_A)(nil),
	}
	file_mumax_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*RevComRequest_Scalarpyfunc)(nil),
		(*RevComRequest_Vectorpyfunc)(nil),
		(*RevComRequest_Quantpyfunc)(nil),
	}
	file_mumax_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*RevComResult_Scalar)(nil),
		(*RevComResult_Vec)(nil),
		(*RevComResult_Quant)(nil),
	}
	file_mumax_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*ScalarFunction_Scalar)(nil),
		(*ScalarFunction_Gocode)(nil),
		(*ScalarFunction_Pyfunc)(nil),
	}
	file_mumax_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*VectorFunction_Gocode)(nil),
		(*VectorFunction_Components)(nil),
		(*VectorFunction_Pyfunc)(nil),
	}
	file_mumax_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*Quantity_Mmobj)(nil),
		(*Quantity_Gocode)(nil),
		(*Quantity_Py)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mumax_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mumax_proto_goTypes,
		DependencyIndexes: file_mumax_proto_depIdxs,
		MessageInfos:      file_mumax_proto_msgTypes,
	}.Build()
	File_mumax_proto = out.File
	file_mumax_proto_rawDesc = nil
	file_mumax_proto_goTypes = nil
	file_mumax_proto_depIdxs = nil
}
